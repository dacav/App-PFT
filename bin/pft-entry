#!/usr/bin/perl
#
# Copyright 2014-2016 - Giovanni Simoni
#
# This file is part of PFT.
#
# PFT is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# PFT is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with PFT.  If not, see <http://www.gnu.org/licenses/>.
#
=head1 NAME

pft entry - Edit a entry

=head1 SYNOPSYS

pft entry [options] <Title...>

=head1 DESCRIPTION

Edit a entry entry

=head1 OPTIONS

=over

=item --year=<y> | -y <y>

=item --month=<m> | -m <m>

=item --day=<d> | -d <d>

=item --author=<name> | -a <name>

=item --tag=<tag> | -t <tag>

=item --resume | -r

=item --back=<count> | -b <count>

=item --editor <command>

The editor can be specified by name or as a simple shell script, where
C<%s> is replaced with the file name.

=item --help | -h

=back


=cut

use strict;
use warnings;

use PFT::Tree;
use PFT::Date;

use Pod::Usage;

use Getopt::Long qw/GetOptionsFromArray/;
Getopt::Long::Configure qw/bundling/;

my %opts;
my %datespec;

GetOptions(
    'year|y=i'      => sub { $datespec{y}  = $_[1] },
    'month|m=s'     => sub { $datespec{m} = $_[1] },
    'day|d=i'       => sub { $datespec{d}  = $_[1] },
    'B!'            => \$opts{B},
    'M!'            => \$opts{M},
    'T!'            => \$opts{T},
    'P!'            => \$opts{P},
    'author|a=s'    => sub { $opts{author} = $_[1] },
    'tag|t=s@'      => sub { push @{$opts{tags}}, $_[1] },
    'resume|r!'     => sub { $opts{back} = 0 },
    'back=i'        => sub { $opts{back} = int($_[1]) },
    'editor=s'      => sub { $opts{editor} = $_[1] },
    'help|h!'       => sub {
        pod2usage
            -exitval => 1,
            -verbose => 2,
            -input => App::PFT::help_of 'entry',
    },
) or exit 1;

$opts{B} = 1 if $opts{back} || grep defined($datespec{$_}), qw(y m d);

do {
    my @sel = grep $opts{$_}, qw(B M T P);
    if (@sel != 1) {
        local $, = ' -';
        say STDERR 'Select exactly one mode: -B -M -T -P. Currently:', @sel;
        exit 2
    }
};

my $tree = eval{ PFT::Tree->new } || do {
    say STDERR $@ =~ s/ at.*$//rs;
    exit 3
};

my $conf = eval{ $tree->conf } || do {
    say STDERR 'Configuration error: ', $@ =~ s/ at.*$//rs;
    exit 4
};

my $editor = $opts{editor} || $conf->{system}{editor} || $ENV{EDITOR} || do {
    say STDERR "Cannot edit: no editor selected";
    say STDERR "Try setting env EDITOR or to define it in configuration file";
    say STDERR "(system -> editor)";
    exit 5
};

my $entry = eval {;
    if (defined $opts{back}) {
        my $entry = $tree->content->blog_back($opts{back});
        defined $entry and $entry or
            die 'Cannot go back by ', $opts{back}, ': ', $@ =~ s/ at .*$//rs;
    } elsif ($opts{M}) {
        $tree->content->new_entry(PFT::Header->new(
            author => $conf->{site}{author},
            date => PFT::Date->from_spec(%datespec)->derive(d => undef),
        ))
    } elsif ($opts{B}) {
        $tree->content->new_entry(PFT::Header->new(
            title => join(' ', @ARGV),
            author => $conf->{site}{author},
            tags => $opts{tags} || [],
            date => eval{ PFT::Date->from_spec(%datespec) } || do {
                say STDERR 'Invalid date: ', $@ =~ s/ at.*$//rs;
            },
        ))
    } elsif ($opts{T}) {
        $tree->content->new_tag(PFT::Header->new(
            title => join(' ', @ARGV),
            author => $conf->{site}{author},
        ))
    } elsif ($opts{P}) {
        $tree->content->new_entry(PFT::Header->new(
            title => join(' ', @ARGV),
            author => $conf->{site}{author},
            tags => $opts{tags} || [],
        ))
    } else { die "Unhandled?" }
}
or do {
    say STDERR 'Cannot edit entry: ', $@ =~ s/ at.*$//rs;
    exit 6
};

eval {
    my $path = $entry->path;
    if ($editor =~ s/(?<!%)%s/$path/g) {
        system($editor)
    } else {
        system($editor, $entry->path)
    }
    if ($entry->exists) {
        if ($entry->empty) {
            $entry->unlink;
        } else {
            $entry->make_consistent;
        }
    }
} or $@ && do {
    say STDERR "After editing: ", $@ =~ s/at .*$//sr;
    exit 7
}
