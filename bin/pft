#!/usr/bin/perl
#
# Copyright 2014 - Giovanni Simoni
#
# This file is part of PFT.
#
# PFT is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# PFT is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with PFT.  If not, see <http://www.gnu.org/licenses/>.
#

=encoding utf-8
=head1 NAME

pft - Hacker friendly static blog generator

=head1 SYNOPSYS

pft <command> [options]

=head1 AVAILABLE COMMANDS

Here follows a list of available commands:

=over

=item * B<init>: Initialize a B<pft> site in the current directory;

=item * B<edit>: Create a content text (e.g. page or blog entry);

=item * B<make>: Build the website;

=item * B<pub>: Publish on the Web;

=item * B<clean>: Clear built tree;

=item * B<grab>: Grab a file as attachment or picture;

=item * B<ls>: List content;

=item * B<show>; Show in browser;

=item * B<help>: Show usage manual.

=back

For options of a specific command I<cmd> use C<pft I<cmd> --help>

=head1 FILESYSTEM LAYOUT

A new site can be initialized by running the C<pft init> command inside a
directory. In this document such directory will be called I<ROOT>.

The initialization command produces the following filesystem structure:

    ROOT
    ├── pft.yaml            - Configuration file
    ├── content
    │   ├── attachments     - Location for attachments
    │   ├── blog            - Root location for blog entries source files
    │   ├── pages           - Location for pages source files
    │   ├── pics            - Location for pictures lookup
    │   └── tags            - Location for tag pages source files
    ├── build               - Location of the built website
    ├── inject              - Content to bulk inject the online site root
    └── templates           - Location for templates

=head2 C<pft.yaml>: configuration file

The configuration file is created automatically by the C<pft init>
command, and populated with sensible defaults.  It is expected to be in
I<YAML> format. For more information consult the manual of C<pft init>.

=head2 C<content>: files generated by the user

This is where your content is stored. The C<pft edit> and C<pft grab>
commands will add text and binary files respectively in the appropriate
subdirectories. The C<pft make> command will scan the C<content> directory
while building the website.

=head2 C<build>: built website

The C<pft make> command will place the HTML pages resulting from the
compilation in this directory.

=head2 C<inject>: auxiliary files

It's common practice to add files in the root directory of your online
website. The C<pft make> command will add any arbitrary file which is
found in the C<inject> directory to the C<build> directory after
compilation.

A good use case for this feature is the C<.htaccess> file used by the
Apache webserver.

=head2 C<templates>: HTML templates for compilation

Each text entry in your C<content> directory will be mapped by C<pft make>
to an HTML file. The output is created by expanding the content into the
structure defined by a template file.

Multiple template files can be stored in the C<template> directory. Some
default files installed by C<pft init>:

=over

=item *

C<default.html> contains a simple but reasonable template suitable
for any page;

=item *

C<dump_page.html> contains a template which gets expanded with all
the available variables for each page. This constitutes a useful test and
a reference for writing additional templates;

=item *

More default installed templates may be added in future.

=back

Among other things, the C<pft.yaml> configuration defines which default
template page should be used for the site. Single content entries can
override this setting by declaring a different template name in their
header. More details will follow in the C<pft edit> manual.

The template engine in use is C<Template::Alloy>: see the relevant
documentation for details about the supported template language.

=head1 TEXT CONTENT

=head2 Format of an entry

Content files are in plain text format. Each file starts with a header in
I<YAML> format. The header is followed by a line with three dashes
(C<--->) marking the beginning of the actual content. The content will be
parsed as I<Markdown> when compiled. The expected encoding for the file
corresponds to the C<locale> encoding (on Unix systems use the C<locale>
command in order to figure it out).

=head2 Different kind of entries

All entries have the same format, but there can be different kind of
entries:

=over

=item Regular Pages

Regular pages do not declare a date in their header. They gets positioned
in C<ROOT/content/pages>, and their file name depends on their title.

=item Blog pages

Blog pages declare a full date (year, month and day) in their header. They
get positioned in C<ROOT/content/blog/YYYY-MM> (where C<YYYY> and C<MM>
correspond to the declared year and month respectively). Their file name
start with the C<DD-> prefix, where C<DD> corresponds to the declared day.

=item Month pages

Month pages are like blog pages, but their date definition lacks of the
day. They are meant as entries I<abouth the whole month>. They are stored as
C<ROOT/content/blog/YYYY-MM.month> (where C<YYYY> and C<MM> represent the
declared year and month.

=item Tag pages

All kind of pages can optionally declare one or more tags. A tag can
optionally be associated to a tag page.

For example, if your site has have a number of entries about cuisine, some
of them might be tagged with the C<chicken> tag. You may want to have a
tag page entitled C<chicken>, where you give a description of what
I<chicken> is (just in case someone doesn't know).

=back

=head2 Editing

The C<pft edit> command can be used to edit any entry. The type of the
edited entry, hence its position in the C<ROOT/content> directory, is
determined by the command line arguments.

The header of a content entry is created automatically by C<pft edit> when
an entry is accessed for the first time. The file is then opened with a
text editor. The C<$EDITOR> environment variable will be honored unless
an editor is defined in the C<pft.yaml> configuration file (see the manual
of C<pft init> for further information).

After the editor is closed a warning will be issued if the header is
invalid. If the file is empty (not even the header is left) it will be
removed from the filesystem. If the header is valid but not consistent
with the position in the filesystem (e.g. the date was changed) the file
position is changed and made consistent.

=head2 Special references handling

As mentioned, the actual content is parsed as regular I<Markdown>, but
I<PFT> supports a special syntax in the text. The goal is allowing the
user to define links to internal resources (like pictures or other pages).
A detailed explanation of this mechanism can be found in the C<pft edit>
documentation.

=cut

use strict;
use warnings;
use warnings qw(FATAL utf8);

use utf8;
use v5.16;

use App::PFT;

use FindBin;
use File::Spec::Functions;
use Pod::Usage;
use Pod::Find qw/pod_where/;

use Encode;
use Encode::Locale;

$_ = decode(locale => $_) foreach @ARGV;
binmode STDIN, ':encoding(console_in)';
binmode STDOUT, ':encoding(console_out)';
binmode STDERR, ':encoding(console_out)';

my $subcmd = shift @ARGV;
unless (defined $subcmd) {
    print STDERR "Usage: pft <command> [<args>]\n",
                 "Usage: pft --help\n";
    exit 1;
} elsif ($subcmd =~ /^(?:help|-h|--help)$/) {
    pod2usage
        -exitval => 1,
        -verbose => 2,
        -input => pod_where({-inc => 1}, __PACKAGE__)
}
my $return = do catfile $FindBin::RealBin, $App::PFT::Name . '-' . $subcmd;
unless (defined $return) {
    print STDERR 'pft: ', $@, "\n" if $@;
    print STDERR 'pft: cannot run command ', $subcmd, ': ', $!, "\n" if $!;
    exit 1
}
